# .github/workflows/deploy-dev.yaml
name: Polybot Deploy Dev

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      EC2_HOST_DEV:
        required: true
      EC2_USERNAME:
        required: true
      EC2_SSH_KEY:
        required: true
      TELEGRAM_BOT_TOKEN_DEV:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      YOLO_SERVER_URL_DEV:
        required: true




  workflow_dispatch:
    inputs:
      image:
        required: true
        type: string

jobs:
    Deploy:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: Deploy Docker image
          env:
            IMG_NAME: ${{ inputs.image }}
            EC2_HOST: ${{ secrets.EC2_HOST_DEV }}
            EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
            SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
            TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_DEV }}
            DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
            YOLO_SERVER_URL_DEV: ${{ secrets.YOLO_SERVER_URL_DEV }}
          
          
          run: |
            cat <<EOF > otelcol-config.yml
            receivers:
              hostmetrics:
                collection_interval: 15s
                scrapers:
                  cpu:
                  memory:
                  disk:
                  filesystem:
                  load:
                  network:
                  processes:

            exporters:
              prometheus:
                endpoint: 0.0.0.0:8889

            service:
              pipelines:
                metrics:
                  receivers: [hostmetrics]
                  exporters: [prometheus]
            EOF
            
          
            echo "IMG_NAME=${DOCKERHUB_USERNAME}/${IMG_NAME}" > .env
            echo "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}" >> .env
            echo "BOT_APP_URL=https://haitham.fursa.click" >> .env
            echo "YOLO_SERVER_URL=${YOLO_SERVER_URL_DEV}" >> .env
            mkdir -p ~/.ssh
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/private_key
            chmod 600 ~/.ssh/private_key
            scp -i ~/.ssh/private_key -o StrictHostKeyChecking=no .env docker-compose.dev.yaml otelcol-config.yml $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/
            ssh -i ~/.ssh/private_key -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "docker compose -f docker-compose.dev.yaml pull && docker compose -f docker-compose.dev.yaml up -d"
